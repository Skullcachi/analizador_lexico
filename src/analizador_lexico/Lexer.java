/* The following code was generated by JFlex 1.6.1 */

package analizador_lexico;
import static analizador_lexico.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/SERGIO-PC/Documents/NetBeansProjects/Analizador_lexico/src/analizador_lexico/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\111\1\112\1\112\1\111\22\0\1\3\1\75\1\103"+
    "\1\0\1\105\1\0\1\76\1\110\1\22\1\23\1\5\1\72\1\106"+
    "\1\73\1\102\1\4\12\2\1\0\1\107\1\101\1\74\1\100\2\0"+
    "\1\42\1\54\1\45\1\57\1\52\1\63\1\67\1\41\1\51\1\1"+
    "\1\61\1\43\1\47\1\56\1\46\1\50\1\70\1\53\1\55\1\44"+
    "\1\62\1\65\1\64\1\66\1\60\1\1\4\0\1\6\1\0\1\10"+
    "\1\24\1\13\1\27\1\20\1\33\1\37\1\7\1\17\1\71\1\31"+
    "\1\11\1\15\1\26\1\14\1\16\1\40\1\21\1\25\1\12\1\32"+
    "\1\35\1\34\1\36\1\30\1\1\1\0\1\77\10\0\1\112\32\0"+
    "\1\104\u15df\0\1\104\u097f\0\13\104\35\0\1\112\1\112\5\0\1\104"+
    "\57\0\1\104\u0fa0\0\1\104\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\12\2"+
    "\1\7\1\10\35\2\1\11\1\12\1\13\1\14\2\1"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\0"+
    "\1\4\1\0\3\2\1\24\122\2\1\25\1\26\1\27"+
    "\1\30\1\31\1\0\1\32\1\33\2\0\54\2\1\14"+
    "\5\2\1\24\56\2\1\24\4\2\1\0\10\2\1\34"+
    "\24\2\1\0\44\2\1\34\32\2\1\24\3\2\1\24"+
    "\40\2\1\24\14\2\47\0\25\2\1\24\2\2\112\0"+
    "\3\2\1\24\7\2\43\0\1\24\44\0\1\24\5\0"+
    "\5\2\75\0\3\2\24\0\1\24\24\0\1\24\3\0"+
    "\2\2\27\0\2\2\5\0\1\24\5\0\1\24\3\0"+
    "\2\2\7\0\2\2\4\0\1\35\12\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\113\0\u012c\0\113\0\u0177"+
    "\0\u01c2\0\u020d\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf"+
    "\0\u041a\0\113\0\113\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591"+
    "\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9"+
    "\0\u0834\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41"+
    "\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99"+
    "\0\u0ce4\0\u0ce4\0\u0d2f\0\113\0\u0d7a\0\u0dc5\0\u0e10\0\u0e5b"+
    "\0\u0ea6\0\113\0\113\0\113\0\113\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149\0\u1194\0\u11df"+
    "\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356\0\u13a1\0\u13ec\0\u1437"+
    "\0\u1482\0\u14cd\0\u1518\0\u1563\0\u15ae\0\u15f9\0\u1644\0\u168f"+
    "\0\u16da\0\u1725\0\u1770\0\u17bb\0\u1806\0\u1851\0\u189c\0\u18e7"+
    "\0\u1932\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f"+
    "\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97"+
    "\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247"+
    "\0\u2292\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u249f"+
    "\0\u24ea\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7"+
    "\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9\0\113\0\113"+
    "\0\113\0\113\0\113\0\u0ea6\0\113\0\u0ef1\0\u2904\0\u294f"+
    "\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69\0\u2db4\0\u2dff"+
    "\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b\0\u2f76\0\u2fc1\0\u300c\0\u3057"+
    "\0\u30a2\0\u30ed\0\u3138\0\u3183\0\u31ce\0\u3219\0\u3264\0\u32af"+
    "\0\u32fa\0\u3345\0\u3390\0\u33db\0\u3426\0\u3471\0\u34bc\0\u3507"+
    "\0\u3552\0\u359d\0\u35e8\0\u3633\0\226\0\u367e\0\u36c9\0\u3714"+
    "\0\u375f\0\u37aa\0\u37f5\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c"+
    "\0\u39b7\0\u3a02\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4"+
    "\0\u3c0f\0\u3c5a\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c"+
    "\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074"+
    "\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc"+
    "\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524"+
    "\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731\0\u477c"+
    "\0\u47c7\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u4989\0\226"+
    "\0\u49d4\0\u4a1f\0\u4a6a\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1"+
    "\0\u4c2c\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u4e39"+
    "\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u5091"+
    "\0\u50dc\0\u5127\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e\0\u52e9"+
    "\0\u5334\0\u537f\0\u53ca\0\u5415\0\u5460\0\u54ab\0\u54f6\0\u5541"+
    "\0\u558c\0\u55d7\0\u5622\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799"+
    "\0\u57e4\0\u582f\0\u587a\0\u58c5\0\u5910\0\u595b\0\u59a6\0\u59f1"+
    "\0\u5a3c\0\u5a87\0\u5ad2\0\u5b1d\0\u5b68\0\u5bb3\0\u5bfe\0\u5c49"+
    "\0\u5c94\0\u5cdf\0\u5d2a\0\u5d75\0\u5dc0\0\u5e0b\0\u5e56\0\u5ea1"+
    "\0\u5eec\0\u5f37\0\u5f82\0\u5fcd\0\u6018\0\u6063\0\u60ae\0\u60f9"+
    "\0\u6144\0\u618f\0\u61da\0\u6225\0\u6270\0\u62bb\0\u6306\0\u6351"+
    "\0\u639c\0\u63e7\0\u6432\0\u647d\0\u64c8\0\u6513\0\u655e\0\u65a9"+
    "\0\u65f4\0\u663f\0\u668a\0\u66d5\0\u6720\0\u676b\0\u67b6\0\u6801"+
    "\0\u684c\0\u6897\0\u68e2\0\u692d\0\u6978\0\u69c3\0\u6a0e\0\u6a59"+
    "\0\u6aa4\0\u6aef\0\u6b3a\0\u6b85\0\u6bd0\0\u6c1b\0\u6c66\0\u6cb1"+
    "\0\u6cfc\0\u6d47\0\u6d92\0\u6ddd\0\u6e28\0\u6e73\0\u6ebe\0\u6f09"+
    "\0\u6f54\0\u6f9f\0\u6fea\0\u7035\0\u7080\0\u70cb\0\u7116\0\u7161"+
    "\0\u71ac\0\u71f7\0\u7242\0\u728d\0\u72d8\0\u7323\0\u736e\0\u73b9"+
    "\0\u7404\0\u744f\0\u749a\0\u74e5\0\u7530\0\u757b\0\u75c6\0\u7611"+
    "\0\u765c\0\u76a7\0\u76f2\0\u773d\0\u7788\0\u77d3\0\u781e\0\u7869"+
    "\0\u78b4\0\u78ff\0\u794a\0\u7995\0\u79e0\0\u7a2b\0\u7a76\0\u7ac1"+
    "\0\u7b0c\0\u7b57\0\u7ba2\0\u7bed\0\u7c38\0\u7c83\0\u7cce\0\u7d19"+
    "\0\u7d64\0\u7daf\0\u7dfa\0\u7e45\0\u7e90\0\u7edb\0\u7f26\0\u7f71"+
    "\0\u7fbc\0\u8007\0\u8052\0\u809d\0\u80e8\0\u8133\0\u817e\0\u81c9"+
    "\0\u8214\0\u825f\0\u82aa\0\u82f5\0\u8340\0\u838b\0\u83d6\0\u8421"+
    "\0\u846c\0\u84b7\0\u8502\0\u854d\0\u8598\0\u85e3\0\u862e\0\u8679"+
    "\0\u86c4\0\u870f\0\u875a\0\u87a5\0\u87f0\0\u883b\0\u8886\0\u88d1"+
    "\0\u891c\0\u8967\0\u89b2\0\u89fd\0\u8a48\0\u8a93\0\u8ade\0\u8b29"+
    "\0\u8b74\0\u8bbf\0\u8c0a\0\u8c55\0\u8ca0\0\u8ceb\0\u8d36\0\u8d81"+
    "\0\u8dcc\0\u8e17\0\u8e62\0\u8ead\0\u8ef8\0\u8f43\0\u8f8e\0\u8fd9"+
    "\0\u9024\0\u906f\0\u90ba\0\u9105\0\u9150\0\u919b\0\u91e6\0\u9231"+
    "\0\u927c\0\u92c7\0\u9312\0\u935d\0\u93a8\0\u93f3\0\u943e\0\u9489"+
    "\0\u94d4\0\u951f\0\u956a\0\u95b5\0\u9600\0\u964b\0\u9696\0\u96e1"+
    "\0\u972c\0\u9777\0\u97c2\0\u980d\0\u9858\0\u98a3\0\u98ee\0\u9939"+
    "\0\u9984\0\u99cf\0\u9a1a\0\u9a65\0\u9ab0\0\u9afb\0\u9b46\0\u9b91"+
    "\0\u9bdc\0\u9c27\0\u9c72\0\u9cbd\0\u9d08\0\u9d53\0\u9d9e\0\u9de9"+
    "\0\u9e34\0\u9e7f\0\u9eca\0\u9f15\0\u9f60\0\u9fab\0\u9ff6\0\ua041"+
    "\0\ua08c\0\ua0d7\0\ua122\0\ua16d\0\ua1b8\0\ua203\0\ua24e\0\ua299"+
    "\0\ua2e4\0\ua32f\0\ua37a\0\ua3c5\0\ua410\0\ua45b\0\ua4a6\0\ua4f1"+
    "\0\ua53c\0\ua587\0\ua5d2\0\ua61d\0\ua668\0\ua6b3\0\ua6fe\0\ua749"+
    "\0\ua794\0\ua7df\0\ua82a\0\ua875\0\ua8c0\0\ua90b\0\ua956\0\ua9a1"+
    "\0\ua9ec\0\uaa37\0\uaa82\0\uaacd\0\uab18\0\uab63\0\uabae\0\uabf9"+
    "\0\uac44\0\uac8f\0\uacda\0\uad25\0\uad70\0\uadbb\0\uae06\0\uae51"+
    "\0\uae9c\0\uaee7\0\uaf32\0\uaf7d\0\uafc8\0\ub013\0\ub05e\0\ub0a9"+
    "\0\ub0f4\0\ub13f\0\ub18a\0\ub1d5\0\ub220\0\ub26b\0\ub2b6\0\ub301"+
    "\0\ub34c\0\ub397\0\ub3e2\0\ub42d\0\ub478\0\ub4c3\0\ub50e\0\ub559"+
    "\0\ub5a4\0\ub5ef\0\ub63a\0\ub685\0\ub6d0\0\ub71b\0\ub766\0\ub7b1"+
    "\0\ub7fc\0\ub847\0\ub892\0\ub8dd\0\ub928\0\ub973\0\ub9be\0\uba09"+
    "\0\uba54\0\uba9f\0\ubaea\0\ubb35\0\ubb80\0\ubbcb\0\ubc16\0\ubc61"+
    "\0\ubcac\0\ubcf7\0\ubd42\0\ubd8d\0\ubdd8\0\ube23\0\ube6e\0\ubeb9"+
    "\0\ubf04\0\ubf4f\0\ubf9a\0\ubfe5\0\uc030\0\uc07b\0\uc0c6\0\uc111"+
    "\0\uc15c\0\uc1a7\0\uc1f2\0\uc23d\0\uc288\0\uc2d3\0\uc31e\0\uc369"+
    "\0\uc3b4\0\uc3ff\0\uc44a\0\uc495\0\uc4e0\0\uc52b\0\uc576\0\uc5c1"+
    "\0\uc60c\0\uc657\0\uc6a2\0\uc6ed\0\uc738\0\uc783\0\uc7ce\0\uc819"+
    "\0\uc864\0\uc8af\0\uc8fa\0\uc945\0\uc990\0\uc9db\0\uca26\0\uca71"+
    "\0\ucabc\0\ucb07\0\ucb52\0\ucb9d\0\ucbe8\0\ucc33\0\ucc7e\0\uccc9"+
    "\0\ucd14\0\ucd5f\0\ucdaa\0\ucdf5\0\uce40\0\uce8b\0\uced6\0\ucf21"+
    "\0\ucf6c\0\ucfb7\0\ud002\0\ud04d\0\ud098\0\ud0e3\0\ud12e\0\ud179"+
    "\0\ud1c4\0\ud20f\0\ud25a\0\ud2a5\0\ud2f0\0\ud33b\0\ud386\0\ud3d1"+
    "\0\ud41c\0\ud467\0\ud4b2\0\ud4fd\0\ud548\0\ud593\0\ud5de\0\ud629"+
    "\0\ud674\0\ud6bf\0\ud70a\0\ud755\0\ud7a0\0\ud7eb\0\ud836\0\ud881"+
    "\0\ud8cc\0\ud917\0\ud962\0\ud9ad\0\ud9f8\0\uda43\0\uda8e\0\udad9"+
    "\0\udb24\0\udb6f\0\udbba\0\udc05\0\udc50\0\udc9b\0\udce6\0\udd31"+
    "\0\udd7c\0\uddc7\0\ude12\0\ude5d\0\udea8\0\udef3\0\udf3e\0\udf89"+
    "\0\udfd4\0\ue01f\0\ue06a\0\ue0b5\0\ue100\0\ue14b\0\ue196\0\ue1e1"+
    "\0\ue22c\0\ue277\0\ue2c2\0\ue30d\0\ue358\0\ue3a3\0\ue3ee\0\ue439"+
    "\0\ue484\0\ue4cf\0\ue51a\0\113\0\ue565\0\ue5b0\0\ue5fb\0\ue646"+
    "\0\ue691\0\ue6dc\0\ue727\0\ue772\0\ue7bd\0\ue808";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\3\1\31\1\32\1\33\1\3\1\34\1\35"+
    "\2\3\1\36\1\37\1\40\1\41\1\42\1\3\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\3\1\54\1\55\1\56\1\3\1\57\1\60\2\3"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\2\1\71\1\2\1\72\1\73\1\74\1\75\1\5"+
    "\115\0\2\3\3\0\14\3\2\0\46\3\23\0\1\4"+
    "\77\0\1\76\14\0\1\77\1\100\106\0\2\3\3\0"+
    "\1\101\13\3\2\0\46\3\22\0\2\3\3\0\13\3"+
    "\1\102\2\0\1\103\1\104\1\105\43\3\22\0\2\3"+
    "\3\0\11\3\1\106\2\3\2\0\46\3\22\0\2\3"+
    "\3\0\1\3\1\107\11\3\1\110\2\0\46\3\22\0"+
    "\2\3\3\0\2\3\1\111\1\112\2\3\1\113\5\3"+
    "\2\0\46\3\22\0\2\3\3\0\13\3\1\104\2\0"+
    "\46\3\22\0\2\3\3\0\13\3\1\114\2\0\6\3"+
    "\1\115\37\3\22\0\2\3\3\0\7\3\1\116\4\3"+
    "\2\0\1\3\1\117\1\120\4\3\1\104\36\3\22\0"+
    "\2\3\3\0\3\3\1\121\1\3\1\122\1\3\1\123"+
    "\4\3\2\0\2\3\1\124\6\3\1\125\1\126\33\3"+
    "\22\0\2\3\3\0\12\3\1\127\1\3\2\0\46\3"+
    "\22\0\2\3\3\0\13\3\1\130\2\0\46\3\22\0"+
    "\2\3\3\0\4\3\1\131\7\3\2\0\10\3\1\132"+
    "\35\3\22\0\2\3\3\0\2\3\1\133\3\3\1\134"+
    "\3\3\1\135\1\3\2\0\46\3\22\0\2\3\3\0"+
    "\6\3\1\104\2\3\1\136\1\137\1\3\2\0\46\3"+
    "\22\0\2\3\3\0\11\3\1\140\2\3\2\0\46\3"+
    "\22\0\2\3\3\0\14\3\2\0\1\3\1\141\1\117"+
    "\43\3\22\0\2\3\3\0\2\3\1\142\3\3\1\143"+
    "\2\3\1\144\2\3\2\0\6\3\1\145\37\3\22\0"+
    "\2\3\3\0\1\3\1\146\12\3\2\0\46\3\22\0"+
    "\2\3\3\0\6\3\1\15\5\3\2\0\46\3\22\0"+
    "\2\3\3\0\3\3\1\147\2\3\1\150\5\3\2\0"+
    "\46\3\22\0\2\3\3\0\13\3\1\151\2\0\27\3"+
    "\1\152\1\153\1\104\1\154\13\3\22\0\2\3\3\0"+
    "\14\3\2\0\25\3\1\155\20\3\22\0\2\3\3\0"+
    "\14\3\2\0\15\3\1\156\11\3\1\157\16\3\22\0"+
    "\2\3\3\0\14\3\2\0\16\3\1\160\1\161\2\3"+
    "\1\162\23\3\22\0\2\3\3\0\14\3\2\0\1\163"+
    "\26\3\1\104\16\3\22\0\2\3\3\0\14\3\2\0"+
    "\27\3\1\164\6\3\1\165\7\3\22\0\2\3\3\0"+
    "\14\3\2\0\2\3\1\166\20\3\1\167\5\3\1\170"+
    "\1\171\4\3\1\104\6\3\22\0\2\3\3\0\14\3"+
    "\2\0\17\3\1\172\1\3\1\173\1\3\1\174\6\3"+
    "\1\175\6\3\1\176\1\177\3\3\22\0\2\3\3\0"+
    "\12\3\1\200\1\3\2\0\26\3\1\201\17\3\22\0"+
    "\2\3\3\0\6\3\1\202\5\3\2\0\27\3\1\203"+
    "\16\3\22\0\2\3\3\0\4\3\1\204\7\3\2\0"+
    "\20\3\1\205\17\3\1\206\5\3\22\0\2\3\3\0"+
    "\14\3\2\0\16\3\1\207\7\3\1\210\7\3\1\211"+
    "\7\3\22\0\2\3\3\0\14\3\2\0\22\3\1\104"+
    "\2\3\1\212\1\213\17\3\22\0\2\3\3\0\14\3"+
    "\2\0\25\3\1\214\20\3\22\0\2\3\3\0\14\3"+
    "\2\0\31\3\1\215\1\170\13\3\22\0\2\3\3\0"+
    "\3\3\1\216\10\3\2\0\16\3\1\217\3\3\1\220"+
    "\2\3\1\221\10\3\1\222\7\3\22\0\2\3\3\0"+
    "\14\3\2\0\15\3\1\223\30\3\22\0\2\3\3\0"+
    "\14\3\2\0\22\3\1\224\23\3\22\0\2\3\3\0"+
    "\14\3\2\0\17\3\1\225\2\3\1\226\23\3\23\0"+
    "\1\4\204\0\1\227\114\0\1\230\113\0\1\231\107\0"+
    "\1\232\112\0\1\233\17\0\3\234\2\0\14\234\2\0"+
    "\46\234\11\0\1\235\1\234\4\0\2\234\2\0\1\236"+
    "\110\0\111\77\2\0\5\237\1\240\105\237\1\0\2\3"+
    "\3\0\1\3\1\241\12\3\2\0\15\3\1\242\30\3"+
    "\22\0\2\3\3\0\13\3\1\243\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\1\3\1\244\44\3\22\0"+
    "\2\3\3\0\1\10\1\3\1\11\1\12\1\245\1\14"+
    "\1\15\1\3\1\16\1\17\1\20\1\21\2\0\1\24"+
    "\1\25\1\246\1\247\1\30\1\3\1\31\1\250\1\33"+
    "\1\3\1\34\1\35\2\3\1\251\1\37\1\252\1\41"+
    "\1\224\1\3\1\43\1\253\1\45\1\254\1\255\1\256"+
    "\1\257\1\52\1\53\1\3\1\54\1\260\1\56\1\3"+
    "\1\57\1\60\2\3\22\0\2\3\3\0\14\3\2\0"+
    "\3\3\1\104\42\3\22\0\2\3\3\0\14\3\2\0"+
    "\1\3\1\261\44\3\22\0\2\3\3\0\13\3\1\262"+
    "\2\0\46\3\22\0\2\3\3\0\2\3\1\263\11\3"+
    "\2\0\4\3\1\104\1\3\1\264\37\3\22\0\2\3"+
    "\3\0\3\3\1\265\1\266\7\3\2\0\1\3\1\141"+
    "\44\3\22\0\2\3\3\0\2\3\1\267\3\3\1\270"+
    "\5\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\2\3\1\271\43\3\22\0\2\3\3\0\6\3\1\272"+
    "\2\3\1\273\2\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\1\274\45\3\22\0\2\3\3\0\10\3"+
    "\1\275\3\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\1\3\1\276\44\3\22\0\2\3\3\0\4\3"+
    "\1\277\1\300\6\3\2\0\1\3\1\301\44\3\22\0"+
    "\2\3\3\0\14\3\2\0\1\3\1\141\44\3\22\0"+
    "\2\3\3\0\1\3\1\302\12\3\2\0\46\3\22\0"+
    "\2\3\3\0\10\3\1\303\3\3\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\3\3\1\304\42\3\22\0"+
    "\2\3\3\0\2\3\1\305\11\3\2\0\46\3\22\0"+
    "\2\3\3\0\4\3\1\306\4\3\1\261\2\3\2\0"+
    "\46\3\22\0\2\3\3\0\4\3\1\307\7\3\2\0"+
    "\14\3\1\310\31\3\22\0\2\3\3\0\12\3\1\311"+
    "\1\3\2\0\46\3\22\0\2\3\3\0\2\3\1\312"+
    "\11\3\2\0\46\3\22\0\2\3\3\0\11\3\1\313"+
    "\2\3\2\0\46\3\22\0\2\3\3\0\7\3\1\314"+
    "\4\3\2\0\46\3\22\0\2\3\3\0\4\3\1\315"+
    "\7\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\10\3\1\104\35\3\22\0\2\3\3\0\12\3\1\316"+
    "\1\3\2\0\46\3\22\0\2\3\3\0\5\3\1\317"+
    "\6\3\2\0\7\3\1\320\36\3\22\0\2\3\3\0"+
    "\12\3\1\321\1\3\2\0\46\3\22\0\2\3\3\0"+
    "\12\3\1\104\1\3\2\0\46\3\22\0\2\3\3\0"+
    "\3\3\1\322\10\3\2\0\46\3\22\0\2\3\3\0"+
    "\13\3\1\323\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\2\3\1\324\43\3\22\0\2\3\3\0\14\3"+
    "\2\0\2\3\1\325\43\3\22\0\2\3\3\0\11\3"+
    "\1\326\2\3\2\0\46\3\22\0\2\3\3\0\6\3"+
    "\1\327\5\3\2\0\46\3\22\0\2\3\3\0\4\3"+
    "\1\302\7\3\2\0\46\3\22\0\2\3\3\0\13\3"+
    "\1\330\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\27\3\1\331\16\3\22\0\2\3\3\0\14\3\2\0"+
    "\31\3\1\332\14\3\22\0\2\3\3\0\14\3\2\0"+
    "\33\3\1\104\12\3\22\0\2\3\3\0\14\3\2\0"+
    "\31\3\1\333\14\3\22\0\2\3\3\0\14\3\2\0"+
    "\27\3\1\334\16\3\22\0\2\3\3\0\14\3\2\0"+
    "\16\3\1\335\15\3\1\104\1\3\1\336\7\3\22\0"+
    "\2\3\3\0\14\3\2\0\17\3\1\337\1\340\10\3"+
    "\1\215\14\3\22\0\2\3\3\0\14\3\2\0\16\3"+
    "\1\341\3\3\1\342\23\3\22\0\2\3\3\0\14\3"+
    "\2\0\32\3\1\343\13\3\22\0\2\3\3\0\14\3"+
    "\2\0\45\3\1\344\22\0\2\3\3\0\14\3\2\0"+
    "\22\3\1\345\2\3\1\346\20\3\22\0\2\3\3\0"+
    "\14\3\2\0\30\3\1\347\15\3\22\0\2\3\3\0"+
    "\4\3\1\350\7\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\24\3\1\351\21\3\22\0\2\3\3\0"+
    "\14\3\2\0\31\3\1\352\14\3\22\0\2\3\3\0"+
    "\14\3\2\0\20\3\1\353\1\354\7\3\1\355\14\3"+
    "\22\0\2\3\3\0\14\3\2\0\31\3\1\215\14\3"+
    "\22\0\2\3\3\0\14\3\2\0\15\3\1\356\30\3"+
    "\22\0\2\3\3\0\14\3\2\0\24\3\1\357\21\3"+
    "\22\0\2\3\3\0\14\3\2\0\33\3\1\360\12\3"+
    "\22\0\2\3\3\0\14\3\2\0\16\3\1\361\27\3"+
    "\22\0\2\3\3\0\14\3\2\0\20\3\1\362\4\3"+
    "\1\333\20\3\22\0\2\3\3\0\14\3\2\0\1\3"+
    "\1\363\44\3\22\0\2\3\3\0\14\3\2\0\20\3"+
    "\1\364\23\3\1\365\1\3\22\0\2\3\3\0\6\3"+
    "\1\366\5\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\26\3\1\367\17\3\22\0\2\3\3\0\13\3"+
    "\1\370\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\16\3\1\371\27\3\22\0\2\3\3\0\14\3\2\0"+
    "\25\3\1\372\20\3\22\0\2\3\3\0\14\3\2\0"+
    "\23\3\1\373\22\3\22\0\2\3\3\0\14\3\2\0"+
    "\40\3\1\104\5\3\22\0\2\3\3\0\14\3\2\0"+
    "\17\3\1\374\26\3\22\0\2\3\3\0\14\3\2\0"+
    "\26\3\1\316\17\3\22\0\2\3\3\0\14\3\2\0"+
    "\21\3\1\375\15\3\1\376\6\3\22\0\2\3\3\0"+
    "\14\3\2\0\26\3\1\377\17\3\22\0\2\3\3\0"+
    "\14\3\2\0\26\3\1\104\17\3\22\0\2\3\3\0"+
    "\6\3\1\u0100\5\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\17\3\1\u0101\26\3\22\0\2\3\3\0"+
    "\14\3\2\0\27\3\1\u0102\16\3\22\0\2\3\3\0"+
    "\14\3\2\0\32\3\1\u0103\13\3\22\0\2\3\3\0"+
    "\14\3\2\0\32\3\1\u0104\13\3\22\0\2\3\3\0"+
    "\14\3\2\0\25\3\1\u0105\20\3\22\0\2\3\3\0"+
    "\14\3\2\0\27\3\1\104\16\3\22\0\2\3\3\0"+
    "\14\3\2\0\22\3\1\u0106\23\3\22\0\2\3\3\0"+
    "\14\3\2\0\20\3\1\356\25\3\21\0\5\237\1\u0107"+
    "\105\237\4\0\1\5\1\240\106\0\2\3\3\0\2\3"+
    "\1\u0108\11\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\16\3\1\u0109\27\3\22\0\2\3\3\0\2\3"+
    "\1\u010a\11\3\2\0\46\3\22\0\2\3\3\0\4\3"+
    "\1\u010b\7\3\2\0\46\3\22\0\2\3\3\0\1\3"+
    "\1\107\11\3\1\u010c\2\0\46\3\22\0\2\3\3\0"+
    "\2\3\1\133\7\3\1\135\1\3\2\0\46\3\22\0"+
    "\2\3\3\0\6\3\1\104\2\3\1\136\1\u010d\1\3"+
    "\2\0\46\3\22\0\2\3\3\0\6\3\1\143\2\3"+
    "\1\144\2\3\2\0\6\3\1\145\37\3\22\0\2\3"+
    "\3\0\14\3\2\0\27\3\1\152\1\153\1\104\1\154"+
    "\13\3\22\0\2\3\3\0\14\3\2\0\15\3\1\156"+
    "\11\3\1\u010e\16\3\22\0\2\3\3\0\14\3\2\0"+
    "\23\3\1\167\5\3\1\170\1\171\4\3\1\104\6\3"+
    "\22\0\2\3\3\0\14\3\2\0\26\3\1\201\17\3"+
    "\22\0\2\3\3\0\14\3\2\0\27\3\1\203\16\3"+
    "\22\0\2\3\3\0\14\3\2\0\20\3\1\205\17\3"+
    "\1\206\5\3\22\0\2\3\3\0\14\3\2\0\16\3"+
    "\1\207\7\3\1\210\17\3\22\0\2\3\3\0\14\3"+
    "\2\0\22\3\1\220\2\3\1\221\10\3\1\222\7\3"+
    "\22\0\2\3\3\0\4\3\1\316\7\3\2\0\46\3"+
    "\22\0\2\3\3\0\6\3\1\135\5\3\2\0\46\3"+
    "\22\0\2\3\3\0\11\3\1\u010f\2\3\2\0\46\3"+
    "\22\0\2\3\3\0\12\3\1\u0110\1\3\2\0\46\3"+
    "\22\0\2\3\3\0\3\3\1\u0111\10\3\2\0\46\3"+
    "\22\0\2\3\3\0\5\3\1\u0112\6\3\2\0\46\3"+
    "\22\0\2\3\3\0\14\3\2\0\1\3\1\u0113\44\3"+
    "\22\0\2\3\3\0\14\3\2\0\2\3\1\141\43\3"+
    "\22\0\2\3\3\0\4\3\1\u0114\7\3\2\0\1\3"+
    "\1\u010f\44\3\22\0\2\3\3\0\4\3\1\u0115\7\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\104\6\3\1\u0116\34\3\22\0\2\3\3\0\3\3"+
    "\1\u0117\10\3\2\0\46\3\22\0\2\3\3\0\3\3"+
    "\1\u0118\10\3\2\0\46\3\22\0\2\3\3\0\12\3"+
    "\1\261\1\3\2\0\46\3\22\0\2\3\3\0\12\3"+
    "\1\u0119\1\3\2\0\46\3\22\0\2\3\3\0\3\3"+
    "\1\u011a\10\3\2\0\46\3\22\0\2\3\3\0\4\3"+
    "\1\u011b\7\3\2\0\46\3\22\0\2\3\3\0\6\3"+
    "\1\104\5\3\2\0\46\3\22\0\2\3\3\0\4\3"+
    "\1\u010a\7\3\2\0\46\3\22\0\2\3\3\0\11\3"+
    "\1\u011c\2\3\2\0\1\3\1\u011d\1\3\1\u011e\3\3"+
    "\1\u011f\1\33\35\3\22\0\2\3\3\0\3\3\1\316"+
    "\10\3\2\0\46\3\22\0\2\3\3\0\12\3\1\u0120"+
    "\1\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\6\3\1\u0121\37\3\22\0\2\3\3\0\14\3\2\0"+
    "\6\3\1\u0122\37\3\22\0\2\3\3\0\2\3\1\u0123"+
    "\11\3\2\0\46\3\22\0\2\3\3\0\4\3\1\u0117"+
    "\7\3\2\0\46\3\22\0\2\3\3\0\4\3\1\266"+
    "\7\3\2\0\46\3\22\0\2\3\3\0\12\3\1\u0124"+
    "\1\3\2\0\46\3\22\0\2\3\3\0\14\3\1\u0125"+
    "\1\0\46\3\22\0\2\3\3\0\3\3\1\u0126\10\3"+
    "\2\0\46\3\22\0\2\3\3\0\2\3\1\u0127\6\3"+
    "\1\u0128\2\3\2\0\46\3\22\0\2\3\3\0\3\3"+
    "\1\105\10\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\1\3\1\264\44\3\22\0\2\3\3\0\1\10"+
    "\1\3\1\11\1\12\1\245\1\14\1\15\1\3\1\16"+
    "\1\17\1\u0129\1\21\2\0\1\24\1\25\1\246\1\247"+
    "\1\30\1\3\1\31\1\250\1\33\1\3\1\34\1\35"+
    "\2\3\1\251\1\37\1\252\1\41\1\224\1\3\1\43"+
    "\1\253\1\45\1\254\1\255\1\256\1\257\1\52\1\53"+
    "\1\3\1\54\1\260\1\56\1\3\1\57\1\60\2\3"+
    "\22\0\2\3\3\0\2\3\1\u012a\11\3\2\0\46\3"+
    "\22\0\2\3\3\0\5\3\1\u012b\6\3\2\0\46\3"+
    "\22\0\2\3\3\0\3\3\1\141\10\3\2\0\46\3"+
    "\22\0\2\3\3\0\14\3\2\0\1\u012c\45\3\22\0"+
    "\2\3\3\0\2\3\1\u012d\11\3\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\16\3\1\u012e\27\3\22\0"+
    "\2\3\3\0\14\3\2\0\20\3\1\u012f\25\3\22\0"+
    "\2\3\3\0\14\3\2\0\20\3\1\316\25\3\22\0"+
    "\2\3\3\0\14\3\2\0\22\3\1\210\23\3\22\0"+
    "\2\3\3\0\14\3\2\0\25\3\1\u0130\20\3\22\0"+
    "\2\3\3\0\14\3\2\0\26\3\1\u0110\17\3\22\0"+
    "\2\3\3\0\14\3\2\0\17\3\1\u0131\26\3\22\0"+
    "\2\3\3\0\14\3\2\0\21\3\1\u0132\24\3\22\0"+
    "\2\3\3\0\14\3\2\0\31\3\1\u0133\14\3\22\0"+
    "\2\3\3\0\14\3\2\0\32\3\1\215\13\3\22\0"+
    "\2\3\3\0\14\3\2\0\20\3\1\u0134\10\3\1\u0130"+
    "\14\3\22\0\2\3\3\0\12\3\1\u0135\1\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\20\3\1\u0136"+
    "\25\3\22\0\2\3\3\0\14\3\2\0\32\3\1\104"+
    "\6\3\1\u0137\4\3\22\0\2\3\3\0\14\3\2\0"+
    "\17\3\1\u0138\26\3\22\0\2\3\3\0\12\3\1\u0139"+
    "\1\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\17\3\1\u013a\26\3\22\0\2\3\3\0\14\3\2\0"+
    "\26\3\1\333\17\3\22\0\2\3\3\0\14\3\2\0"+
    "\26\3\1\u013b\17\3\22\0\2\3\3\0\14\3\2\0"+
    "\17\3\1\u013c\26\3\22\0\2\3\3\0\14\3\2\0"+
    "\20\3\1\u013d\25\3\22\0\2\3\3\0\14\3\2\0"+
    "\22\3\1\104\23\3\22\0\2\3\3\0\14\3\2\0"+
    "\20\3\1\u012e\25\3\22\0\2\3\3\0\14\3\2\0"+
    "\25\3\1\u013e\3\3\1\u013f\1\3\1\u0140\3\3\1\u0141"+
    "\1\56\5\3\22\0\2\3\3\0\14\3\2\0\17\3"+
    "\1\316\26\3\22\0\2\3\3\0\14\3\2\0\26\3"+
    "\1\u0142\17\3\22\0\2\3\3\0\6\3\1\u0143\5\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\36\3"+
    "\1\u0144\7\3\22\0\2\3\3\0\14\3\2\0\36\3"+
    "\1\u0145\7\3\22\0\2\3\3\0\3\3\1\u0146\10\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\16\3"+
    "\1\u0147\27\3\22\0\2\3\3\0\11\3\1\u0148\2\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\20\3"+
    "\1\u0138\25\3\22\0\2\3\3\0\14\3\2\0\20\3"+
    "\1\340\25\3\22\0\2\3\3\0\14\3\2\0\26\3"+
    "\1\u0149\17\3\22\0\2\3\3\0\14\3\2\0\17\3"+
    "\1\u014a\26\3\22\0\2\3\3\0\14\3\2\0\17\3"+
    "\1\u014b\26\3\22\0\2\3\3\0\14\3\2\0\16\3"+
    "\1\u014c\27\3\22\0\2\3\3\0\14\3\2\0\17\3"+
    "\1\154\26\3\22\0\2\3\3\0\2\3\1\u014d\11\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\31\3"+
    "\1\336\14\3\22\0\2\3\3\0\1\10\1\3\1\11"+
    "\1\12\1\245\1\14\1\15\1\3\1\16\1\17\1\20"+
    "\1\21\2\0\1\24\1\25\1\246\1\247\1\30\1\3"+
    "\1\31\1\250\1\33\1\3\1\34\1\35\2\3\1\251"+
    "\1\37\1\252\1\41\1\224\1\3\1\43\1\253\1\u014e"+
    "\1\254\1\255\1\256\1\257\1\52\1\53\1\3\1\54"+
    "\1\260\1\56\1\3\1\57\1\60\2\3\22\0\2\3"+
    "\3\0\14\3\2\0\16\3\1\u014f\27\3\22\0\2\3"+
    "\3\0\14\3\2\0\21\3\1\u0150\24\3\22\0\2\3"+
    "\3\0\14\3\2\0\17\3\1\215\26\3\22\0\2\3"+
    "\3\0\14\3\2\0\30\3\1\u0151\15\3\21\0\4\237"+
    "\1\5\1\u0107\105\237\1\0\2\3\3\0\3\3\1\u0152"+
    "\10\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\17\3\1\u0153\26\3\22\0\2\3\3\0\14\3\2\0"+
    "\4\3\1\316\41\3\22\0\2\3\3\0\13\3\1\u0154"+
    "\2\0\46\3\22\0\2\3\3\0\2\3\1\263\11\3"+
    "\2\0\4\3\1\104\41\3\22\0\2\3\3\0\5\3"+
    "\1\317\6\3\2\0\7\3\1\u0155\36\3\22\0\2\3"+
    "\3\0\14\3\2\0\16\3\1\335\15\3\1\104\11\3"+
    "\22\0\2\3\3\0\4\3\1\104\7\3\2\0\46\3"+
    "\22\0\2\3\3\0\2\3\1\u0156\11\3\2\0\46\3"+
    "\22\0\2\3\3\0\1\3\1\104\12\3\2\0\46\3"+
    "\22\0\2\3\3\0\14\3\2\0\1\3\1\104\44\3"+
    "\22\0\2\3\3\0\11\3\1\u0157\2\3\2\0\46\3"+
    "\22\0\2\3\3\0\12\3\1\u0158\1\3\2\0\46\3"+
    "\22\0\2\3\3\0\2\3\1\u0159\11\3\2\0\46\3"+
    "\22\0\2\3\3\0\11\3\1\u015a\2\3\2\0\46\3"+
    "\22\0\2\3\3\0\12\3\1\u015b\1\3\2\0\46\3"+
    "\22\0\2\3\3\0\13\3\1\u015c\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\6\3\1\u015d\37\3\22\0"+
    "\2\3\3\0\2\3\1\u015e\7\3\1\u015f\1\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\7\3\1\104"+
    "\36\3\22\0\2\3\3\0\14\3\2\0\10\3\1\132"+
    "\35\3\22\0\2\3\3\0\12\3\1\u0160\1\3\2\0"+
    "\46\3\22\0\2\3\3\0\6\3\1\143\5\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\2\3\1\u0161"+
    "\43\3\22\0\2\3\3\0\13\3\1\u0162\2\0\46\3"+
    "\22\0\2\3\3\0\11\3\1\u0163\2\3\2\0\46\3"+
    "\22\0\2\3\3\0\14\3\2\0\5\3\1\104\40\3"+
    "\22\0\2\3\3\0\14\3\2\0\1\3\1\u0164\44\3"+
    "\44\0\1\u0165\70\0\2\3\3\0\2\3\1\u0166\11\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\6\3"+
    "\1\u0167\37\3\22\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\u0168\43\3\22\0\2\3\3\0\2\3\1\266\1\121"+
    "\1\3\1\122\1\3\1\123\4\3\2\0\2\3\1\124"+
    "\6\3\1\125\1\126\33\3\22\0\2\3\3\0\3\3"+
    "\1\u0169\10\3\2\0\46\3\22\0\2\3\3\0\4\3"+
    "\1\u016a\7\3\2\0\46\3\22\0\2\3\3\0\2\3"+
    "\1\u016b\11\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\4\3\1\u014a\41\3\22\0\2\3\3\0\14\3"+
    "\2\0\34\3\1\316\11\3\22\0\2\3\3\0\14\3"+
    "\2\0\27\3\1\u016c\16\3\22\0\2\3\3\0\14\3"+
    "\2\0\20\3\1\104\25\3\22\0\2\3\3\0\14\3"+
    "\2\0\16\3\1\u016d\27\3\22\0\2\3\3\0\14\3"+
    "\2\0\15\3\1\104\30\3\22\0\2\3\3\0\14\3"+
    "\2\0\31\3\1\104\14\3\22\0\2\3\3\0\14\3"+
    "\2\0\25\3\1\u016e\20\3\22\0\2\3\3\0\5\3"+
    "\1\u014d\6\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\26\3\1\u016f\17\3\22\0\2\3\3\0\14\3"+
    "\2\0\16\3\1\u0170\27\3\22\0\2\3\3\0\14\3"+
    "\2\0\25\3\1\u0171\20\3\22\0\2\3\3\0\14\3"+
    "\2\0\13\3\1\u0172\32\3\22\0\2\3\3\0\14\3"+
    "\2\0\26\3\1\u0173\17\3\22\0\2\3\3\0\14\3"+
    "\2\0\27\3\1\u0174\16\3\22\0\2\3\3\0\14\3"+
    "\2\0\36\3\1\u0175\7\3\22\0\2\3\3\0\14\3"+
    "\2\0\16\3\1\u0176\7\3\1\u0177\17\3\22\0\2\3"+
    "\3\0\14\3\2\0\37\3\1\104\6\3\22\0\2\3"+
    "\3\0\14\3\2\0\40\3\1\206\5\3\22\0\2\3"+
    "\3\0\14\3\2\0\26\3\1\u0178\17\3\22\0\2\3"+
    "\3\0\14\3\2\0\22\3\1\220\23\3\22\0\2\3"+
    "\3\0\14\3\2\0\32\3\1\u0179\13\3\22\0\2\3"+
    "\3\0\14\3\2\0\6\3\1\u017a\37\3\22\0\2\3"+
    "\3\0\14\3\2\0\27\3\1\u017b\16\3\22\0\2\3"+
    "\3\0\14\3\2\0\25\3\1\u017c\20\3\22\0\2\3"+
    "\3\0\12\3\1\u017d\1\3\2\0\46\3\22\0\2\3"+
    "\3\0\14\3\2\0\35\3\1\104\10\3\22\0\2\3"+
    "\3\0\14\3\2\0\2\3\1\u017e\43\3\22\0\2\3"+
    "\3\0\14\3\2\0\31\3\1\u017f\14\3\22\0\2\3"+
    "\3\0\14\3\2\0\16\3\1\u0180\3\3\1\u0181\2\3"+
    "\1\u0182\1\3\1\u0183\1\u0184\1\u0185\1\u0186\4\3\1\u0187"+
    "\6\3\22\0\2\3\3\0\14\3\2\0\16\3\1\u0188"+
    "\27\3\22\0\2\3\3\0\14\3\2\0\36\3\1\u0189"+
    "\7\3\22\0\2\3\3\0\4\3\1\u014a\7\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\16\3\1\340"+
    "\1\172\1\3\1\173\1\3\1\174\6\3\1\175\6\3"+
    "\1\176\1\177\3\3\22\0\2\3\3\0\14\3\2\0"+
    "\17\3\1\u018a\26\3\22\0\2\3\3\0\14\3\2\0"+
    "\20\3\1\u018b\25\3\22\0\2\3\3\0\14\3\2\0"+
    "\16\3\1\u018c\27\3\22\0\2\3\3\0\4\3\1\u018d"+
    "\7\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\20\3\1\u018e\25\3\22\0\2\3\3\0\2\3\1\u018f"+
    "\11\3\2\0\46\3\22\0\2\3\3\0\2\3\1\u0127"+
    "\11\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\1\326\45\3\22\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\u0190\43\3\22\0\2\3\3\0\5\3\1\u0191\6\3"+
    "\2\0\46\3\22\0\2\3\3\0\4\3\1\141\7\3"+
    "\2\0\46\3\22\0\2\3\3\0\5\3\1\104\6\3"+
    "\2\0\46\3\22\0\2\3\3\0\7\3\1\u0192\4\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\7\3"+
    "\1\u0193\36\3\22\0\2\3\3\0\14\3\2\0\3\3"+
    "\1\u0194\42\3\22\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\u0195\43\3\22\0\2\3\3\0\2\3\1\u0196\11\3"+
    "\2\0\46\3\22\0\2\3\3\0\5\3\1\317\6\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\3\3"+
    "\1\u0113\42\3\22\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\104\43\3\22\0\2\3\3\0\13\3\1\u0194\2\0"+
    "\46\3\22\0\2\3\3\0\10\3\1\u0193\3\3\2\0"+
    "\46\3\27\0\1\u0197\1\0\1\u0198\1\u0199\1\u019a\1\u019b"+
    "\1\u019c\1\0\1\u019d\1\u019e\1\u019f\1\u01a0\2\0\1\u01a1"+
    "\1\u01a2\1\u01a3\1\u01a4\1\u01a5\1\0\1\u01a6\1\u01a7\1\u01a8"+
    "\1\0\1\u01a9\1\u01aa\2\0\1\u01ab\1\u01ac\1\u01ad\1\u01ae"+
    "\1\u01af\1\0\1\u01b0\1\u01b1\1\u01b2\1\u01b3\1\u01b4\1\u01b5"+
    "\1\u01b6\1\u01b7\1\u01b8\1\0\1\u01b9\1\u01ba\1\u01bb\1\0"+
    "\1\u01bc\1\u01bd\24\0\2\3\3\0\13\3\1\141\2\0"+
    "\46\3\22\0\2\3\3\0\3\3\1\u010f\10\3\2\0"+
    "\46\3\22\0\2\3\3\0\12\3\1\u01be\1\3\2\0"+
    "\46\3\22\0\2\3\3\0\1\10\1\3\1\11\1\u01bf"+
    "\1\245\1\14\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\2\0\1\24\1\25\1\246\1\247\1\30\1\3\1\31"+
    "\1\250\1\33\1\3\1\34\1\35\2\3\1\251\1\37"+
    "\1\252\1\41\1\224\1\3\1\43\1\253\1\45\1\254"+
    "\1\255\1\256\1\257\1\52\1\53\1\3\1\54\1\260"+
    "\1\56\1\3\1\57\1\60\2\3\22\0\2\3\3\0"+
    "\11\3\1\u01c0\2\3\2\0\46\3\22\0\2\3\3\0"+
    "\3\3\1\104\10\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\16\3\1\u01c1\27\3\22\0\2\3\3\0"+
    "\14\3\2\0\30\3\1\u0105\15\3\22\0\2\3\3\0"+
    "\14\3\2\0\32\3\1\u01c2\13\3\22\0\2\3\3\0"+
    "\14\3\2\0\21\3\1\u01c3\24\3\22\0\2\3\3\0"+
    "\14\3\2\0\20\3\1\215\25\3\22\0\2\3\3\0"+
    "\14\3\2\0\21\3\1\104\24\3\22\0\2\3\3\0"+
    "\12\3\1\u01c4\1\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\23\3\1\u01c5\22\3\22\0\2\3\3\0"+
    "\14\3\2\0\37\3\1\u01c6\6\3\22\0\2\3\3\0"+
    "\14\3\2\0\33\3\1\u01c7\12\3\22\0\2\3\3\0"+
    "\14\3\2\0\32\3\1\u01c8\13\3\22\0\2\3\3\0"+
    "\14\3\2\0\16\3\1\u01c9\27\3\22\0\2\3\3\0"+
    "\14\3\2\0\21\3\1\375\24\3\22\0\2\3\3\0"+
    "\14\3\2\0\33\3\1\u0133\12\3\22\0\2\3\3\0"+
    "\13\3\1\u01ca\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\32\3\1\104\13\3\22\0\2\3\3\0\14\3"+
    "\2\0\27\3\1\u01c7\16\3\22\0\2\3\3\0\2\3"+
    "\1\u01cb\11\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\13\3\1\u014a\32\3\22\0\2\3\3\0\14\3"+
    "\2\0\24\3\1\u01c6\21\3\22\0\2\3\3\0\13\3"+
    "\1\151\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\1\163\45\3\22\0\2\3\3\0\14\3\2\0\2\3"+
    "\1\166\43\3\22\0\2\3\3\0\12\3\1\200\1\3"+
    "\2\0\46\3\22\0\2\3\3\0\6\3\1\202\5\3"+
    "\2\0\46\3\22\0\2\3\3\0\4\3\1\204\7\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\36\3"+
    "\1\211\7\3\22\0\2\3\3\0\3\3\1\216\10\3"+
    "\2\0\46\3\22\0\2\3\3\0\14\3\2\0\27\3"+
    "\1\215\16\3\22\0\2\3\3\0\14\3\2\0\17\3"+
    "\1\u0130\26\3\22\0\2\3\3\0\1\10\1\3\1\11"+
    "\1\12\1\245\1\14\1\15\1\3\1\16\1\17\1\20"+
    "\1\21\2\0\1\24\1\25\1\246\1\247\1\30\1\3"+
    "\1\31\1\250\1\33\1\3\1\34\1\35\2\3\1\251"+
    "\1\u01cc\1\252\1\41\1\224\1\3\1\43\1\253\1\45"+
    "\1\254\1\255\1\256\1\257\1\52\1\53\1\3\1\54"+
    "\1\260\1\56\1\3\1\57\1\60\2\3\22\0\2\3"+
    "\3\0\14\3\2\0\25\3\1\u01cd\20\3\22\0\2\3"+
    "\3\0\14\3\2\0\17\3\1\104\26\3\22\0\2\3"+
    "\3\0\1\u01ce\13\3\2\0\46\3\22\0\2\3\3\0"+
    "\1\u01cf\13\3\2\0\46\3\22\0\2\3\3\0\5\3"+
    "\1\u010f\6\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\6\3\1\141\37\3\22\0\2\3\3\0\4\3"+
    "\1\u01d0\7\3\2\0\46\3\22\0\2\3\3\0\12\3"+
    "\1\u01d1\1\3\2\0\46\3\22\0\2\3\3\0\2\3"+
    "\1\u01d2\11\3\2\0\46\3\22\0\2\3\3\0\12\3"+
    "\1\u01d3\1\3\2\0\46\3\22\0\2\3\3\0\5\3"+
    "\1\u01d4\6\3\2\0\46\3\22\0\2\3\3\0\14\3"+
    "\2\0\3\3\1\u01d5\42\3\27\0\1\u01d6\125\0\1\u01d7"+
    "\2\0\1\u01d8\1\u0165\1\u01d9\103\0\1\u01da\102\0\1\u01db"+
    "\11\0\1\u01dc\101\0\1\u01dd\1\u01de\2\0\1\u01df\117\0"+
    "\1\u0165\112\0\1\u01e0\10\0\1\u01e1\75\0\1\u01e2\7\0"+
    "\1\u01e3\1\u01e4\4\0\1\u0165\70\0\1\u01e5\1\0\1\u01e6"+
    "\1\0\1\u01e7\10\0\1\u01e8\6\0\1\u01e9\1\u01ea\74\0"+
    "\1\u01eb\113\0\1\u01ec\103\0\1\u01ed\21\0\1\u01ee\66\0"+
    "\1\u01ef\7\0\1\u01f0\106\0\1\u0165\2\0\1\u01f1\1\u01f2"+
    "\111\0\1\u01f3\120\0\1\u01f4\1\u01e3\100\0\1\u01f5\2\0"+
    "\1\u01f6\12\0\1\u01f7\67\0\1\u01f8\117\0\1\u019c\107\0"+
    "\1\u01f9\2\0\1\u01fa\151\0\1\u01fb\1\u01fc\1\u0165\1\u01fd"+
    "\105\0\1\u01fe\102\0\1\u01ff\11\0\1\u0200\101\0\1\u0201"+
    "\1\u0202\2\0\1\u0203\117\0\1\u0165\112\0\1\u0204\6\0"+
    "\1\u0205\77\0\1\u0206\5\0\1\u0207\1\u0208\4\0\1\u0165"+
    "\72\0\1\u0209\1\0\1\u020a\1\0\1\u020b\6\0\1\u020c"+
    "\6\0\1\u020d\1\u020e\76\0\1\u020f\113\0\1\u0210\103\0"+
    "\1\u0211\17\0\1\u0212\70\0\1\u0213\7\0\1\u0214\106\0"+
    "\1\u0165\2\0\1\u0215\1\u0216\111\0\1\u0217\116\0\1\u0218"+
    "\1\u0207\102\0\1\u0219\2\0\1\u021a\10\0\1\u021b\71\0"+
    "\1\u021c\117\0\1\u01af\107\0\1\u021d\2\0\1\u021e\45\0"+
    "\2\3\3\0\14\3\1\u021f\1\0\46\3\22\0\2\3"+
    "\3\0\11\3\1\106\2\3\2\0\4\3\1\104\41\3"+
    "\22\0\2\3\3\0\6\3\1\u0162\5\3\2\0\46\3"+
    "\22\0\2\3\3\0\14\3\2\0\21\3\1\u0130\24\3"+
    "\22\0\2\3\3\0\14\3\2\0\36\3\1\215\7\3"+
    "\22\0\2\3\3\0\14\3\2\0\20\3\1\u0220\25\3"+
    "\22\0\2\3\3\0\13\3\1\u014a\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\26\3\1\u0221\17\3\22\0"+
    "\2\3\3\0\14\3\2\0\16\3\1\u0222\27\3\22\0"+
    "\2\3\3\0\14\3\2\0\26\3\1\u0223\17\3\22\0"+
    "\2\3\3\0\14\3\2\0\21\3\1\u0224\24\3\22\0"+
    "\2\3\3\0\14\3\2\0\33\3\1\u0225\12\3\22\0"+
    "\2\3\3\0\5\3\1\u0226\6\3\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\2\3\1\u014a\43\3\22\0"+
    "\2\3\3\0\14\3\2\0\25\3\1\155\6\3\1\104"+
    "\11\3\22\0\2\3\3\0\14\3\2\0\22\3\1\u017b"+
    "\23\3\22\0\2\3\3\0\5\3\1\u0227\6\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\21\3\1\u0228"+
    "\24\3\22\0\2\3\3\0\12\3\1\105\1\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\2\3\1\u0229"+
    "\43\3\22\0\2\3\3\0\5\3\1\141\6\3\2\0"+
    "\46\3\22\0\2\3\3\0\1\u022a\1\3\1\11\1\12"+
    "\1\245\1\14\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\2\0\1\24\1\25\1\246\1\247\1\30\1\3\1\31"+
    "\1\250\1\33\1\3\1\34\1\35\2\3\1\251\1\37"+
    "\1\252\1\41\1\224\1\3\1\43\1\253\1\45\1\254"+
    "\1\255\1\256\1\257\1\52\1\53\1\3\1\54\1\260"+
    "\1\56\1\3\1\57\1\60\2\3\22\0\2\3\3\0"+
    "\12\3\1\u01d5\1\3\2\0\46\3\22\0\2\3\3\0"+
    "\6\3\1\u011c\5\3\2\0\46\3\30\0\1\u022b\31\0"+
    "\1\u022c\72\0\1\u022d\116\0\1\u022e\114\0\1\u0165\110\0"+
    "\1\u022f\106\0\1\u0230\101\0\1\u0231\17\0\1\u0165\73\0"+
    "\1\u0232\1\u0233\12\0\1\u01f4\75\0\1\u0234\3\0\1\u0235"+
    "\124\0\1\u0236\100\0\1\u0237\2\0\1\u0238\117\0\1\u0239"+
    "\104\0\1\u023a\121\0\1\u023b\77\0\1\u023c\1\u023d\11\0"+
    "\1\u023e\112\0\1\u01f4\74\0\1\u023f\121\0\1\u0240\123\0"+
    "\1\u0241\73\0\1\u0242\114\0\1\u0243\4\0\1\u022f\105\0"+
    "\1\u0244\25\0\1\u0245\72\0\1\u0246\102\0\1\u0247\121\0"+
    "\1\u0248\110\0\1\u0249\131\0\1\u0165\76\0\1\u024a\105\0"+
    "\1\u024b\17\0\1\u024c\77\0\1\u024d\112\0\1\u0165\113\0"+
    "\1\u024e\117\0\1\u024f\112\0\1\u0250\103\0\1\u0251\107\0"+
    "\1\u0252\110\0\1\u023f\153\0\1\u0253\114\0\1\u0254\114\0"+
    "\1\u0165\110\0\1\u0255\110\0\1\u0256\101\0\1\u0257\15\0"+
    "\1\u0165\75\0\1\u0258\1\u0259\10\0\1\u0218\77\0\1\u025a"+
    "\3\0\1\u025b\122\0\1\u025c\102\0\1\u025d\2\0\1\u025e"+
    "\115\0\1\u025f\106\0\1\u0260\117\0\1\u0261\101\0\1\u0262"+
    "\1\u0263\7\0\1\u0264\112\0\1\u0218\76\0\1\u0265\121\0"+
    "\1\u0266\121\0\1\u0267\75\0\1\u0268\114\0\1\u0269\4\0"+
    "\1\u0255\105\0\1\u026a\23\0\1\u026b\74\0\1\u026c\102\0"+
    "\1\u026d\121\0\1\u026e\110\0\1\u026f\127\0\1\u0165\100\0"+
    "\1\u024a\105\0\1\u0270\15\0\1\u0271\101\0\1\u0272\112\0"+
    "\1\u0165\113\0\1\u0273\115\0\1\u0274\112\0\1\u0275\105\0"+
    "\1\u0276\107\0\1\u0277\110\0\1\u0265\151\0\1\u0278\10\0"+
    "\2\3\3\0\14\3\2\0\26\3\1\154\17\3\22\0"+
    "\2\3\3\0\14\3\2\0\32\3\1\u0279\13\3\22\0"+
    "\2\3\3\0\14\3\2\0\21\3\1\215\24\3\22\0"+
    "\2\3\3\0\1\u027a\1\3\1\11\1\12\1\245\1\14"+
    "\1\15\1\3\1\16\1\17\1\20\1\21\2\0\1\24"+
    "\1\25\1\246\1\247\1\30\1\3\1\31\1\250\1\33"+
    "\1\3\1\34\1\35\2\3\1\251\1\37\1\252\1\41"+
    "\1\224\1\3\1\43\1\253\1\45\1\254\1\255\1\256"+
    "\1\257\1\52\1\53\1\3\1\54\1\260\1\56\1\3"+
    "\1\57\1\60\2\3\22\0\2\3\3\0\14\3\2\0"+
    "\26\3\1\u0225\17\3\22\0\2\3\3\0\14\3\2\0"+
    "\22\3\1\u013e\23\3\22\0\2\3\3\0\12\3\1\u014a"+
    "\1\3\2\0\46\3\22\0\2\3\3\0\6\3\1\u027b"+
    "\5\3\2\0\46\3\22\0\2\3\3\0\14\3\2\0"+
    "\22\3\1\u027c\23\3\22\0\2\3\3\0\4\3\1\u0113"+
    "\7\3\2\0\46\3\22\0\2\3\3\0\1\101\5\3"+
    "\1\u027d\5\3\2\0\46\3\31\0\1\u027e\144\0\1\u027f"+
    "\60\0\1\u0280\114\0\1\u0281\112\0\1\u024a\114\0\1\u01f0"+
    "\115\0\1\u0282\104\0\1\u0283\114\0\1\u0284\124\0\1\u0285"+
    "\113\0\1\u01f4\76\0\1\u0286\12\0\1\u0282\77\0\1\u0287"+
    "\126\0\1\u0165\6\0\1\u0288\66\0\1\u0289\112\0\1\u028a"+
    "\121\0\1\u022f\112\0\1\u028b\103\0\1\u028c\113\0\1\u028d"+
    "\114\0\1\u0165\110\0\1\u0280\117\0\1\u028e\5\0\1\u028f"+
    "\1\0\1\u0290\3\0\1\u0291\1\u01a8\67\0\1\u024a\121\0"+
    "\1\u0292\124\0\1\u0293\112\0\1\u0294\70\0\1\u0295\114\0"+
    "\1\u0289\112\0\1\u0233\120\0\1\u0296\114\0\1\u0125\101\0"+
    "\1\u0297\111\0\1\u0298\113\0\1\u01d9\107\0\1\u0197\1\0"+
    "\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\0\1\u019d\1\u019e"+
    "\1\u0299\1\u01a0\2\0\1\u01a1\1\u01a2\1\u01a3\1\u01a4\1\u01a5"+
    "\1\0\1\u01a6\1\u01a7\1\u01a8\1\0\1\u01a9\1\u01aa\2\0"+
    "\1\u01ab\1\u01ac\1\u01ad\1\u01ae\1\u01af\1\0\1\u01b0\1\u01b1"+
    "\1\u01b2\1\u01b3\1\u01b4\1\u01b5\1\u01b6\1\u01b7\1\u01b8\1\0"+
    "\1\u01b9\1\u01ba\1\u01bb\1\0\1\u01bc\1\u01bd\33\0\1\u029a"+
    "\115\0\1\u029b\110\0\1\u01f4\125\0\1\u029c\130\0\1\u029d"+
    "\114\0\1\u029e\112\0\1\u024a\114\0\1\u0214\115\0\1\u029f"+
    "\104\0\1\u02a0\114\0\1\u02a1\122\0\1\u02a2\113\0\1\u0218"+
    "\100\0\1\u02a3\10\0\1\u029f\101\0\1\u02a4\124\0\1\u0165"+
    "\6\0\1\u02a5\70\0\1\u02a6\112\0\1\u02a7\121\0\1\u0255"+
    "\112\0\1\u02a8\103\0\1\u02a9\113\0\1\u02aa\114\0\1\u0165"+
    "\110\0\1\u029d\117\0\1\u02ab\3\0\1\u02ac\1\0\1\u02ad"+
    "\3\0\1\u02ae\1\u01bb\71\0\1\u024a\121\0\1\u02af\122\0"+
    "\1\u02b0\112\0\1\u02b1\72\0\1\u02b2\114\0\1\u02a6\112\0"+
    "\1\u0259\120\0\1\u02b3\103\0\1\u02b4\111\0\1\u02b5\113\0"+
    "\1\u01fd\55\0\1\u0197\1\0\1\u0198\1\u0199\1\u019a\1\u019b"+
    "\1\u019c\1\0\1\u019d\1\u019e\1\u019f\1\u01a0\2\0\1\u01a1"+
    "\1\u01a2\1\u01a3\1\u01a4\1\u01a5\1\0\1\u01a6\1\u01a7\1\u01a8"+
    "\1\0\1\u01a9\1\u01aa\2\0\1\u01ab\1\u01ac\1\u01ad\1\u01ae"+
    "\1\u01af\1\0\1\u01b0\1\u01b1\1\u02b6\1\u01b3\1\u01b4\1\u01b5"+
    "\1\u01b6\1\u01b7\1\u01b8\1\0\1\u01b9\1\u01ba\1\u01bb\1\0"+
    "\1\u01bc\1\u01bd\65\0\1\u02b7\115\0\1\u02b8\110\0\1\u0218"+
    "\123\0\1\u02b9\141\0\1\u02ba\10\0\2\3\3\0\14\3"+
    "\2\0\20\3\1\u0133\25\3\22\0\2\3\3\0\1\101"+
    "\13\3\2\0\22\3\1\u02bb\23\3\22\0\2\3\3\0"+
    "\7\3\1\u02bc\4\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\23\3\1\u02bd\22\3\22\0\2\3\3\0"+
    "\14\3\2\0\2\3\1\u01d2\43\3\32\0\1\u02be\144\0"+
    "\1\u02bf\77\0\1\u024a\103\0\1\u02c0\103\0\1\u0165\110\0"+
    "\1\u02c1\111\0\1\u0165\130\0\1\u0165\104\0\1\u02c2\113\0"+
    "\1\u02c3\102\0\1\u02c4\121\0\1\u02c5\113\0\1\u02c6\113\0"+
    "\1\u02c7\123\0\1\u02c8\70\0\1\u02c9\7\0\1\u02ca\125\0"+
    "\1\u0165\113\0\1\u01ee\76\0\1\u02cb\106\0\1\u01f5\124\0"+
    "\1\u02cc\105\0\1\u02cd\110\0\1\u02ce\124\0\1\u0165\106\0"+
    "\1\u02cf\75\0\1\u02d0\134\0\1\u02d1\70\0\1\u0233\1\u01e5"+
    "\1\0\1\u01e6\1\0\1\u01e7\10\0\1\u01e8\6\0\1\u01e9"+
    "\1\u01ea\65\0\1\u02d2\113\0\1\u02d3\110\0\1\u02d4\162\0"+
    "\1\u024a\105\0\1\u02d5\103\0\1\u0165\110\0\1\u02d6\111\0"+
    "\1\u0165\126\0\1\u0165\106\0\1\u02d7\113\0\1\u02d8\102\0"+
    "\1\u02d9\121\0\1\u02da\113\0\1\u02db\113\0\1\u02dc\121\0"+
    "\1\u02dd\72\0\1\u02de\7\0\1\u02df\123\0\1\u0165\113\0"+
    "\1\u0212\100\0\1\u02e0\106\0\1\u0219\122\0\1\u02e1\107\0"+
    "\1\u02e2\110\0\1\u02e3\122\0\1\u0165\106\0\1\u02e4\77\0"+
    "\1\u02e5\132\0\1\u02e6\72\0\1\u0259\1\u0209\1\0\1\u020a"+
    "\1\0\1\u020b\6\0\1\u020c\6\0\1\u020d\1\u020e\67\0"+
    "\1\u02e7\113\0\1\u02e8\110\0\1\u02e9\156\0\1\u02ea\5\0"+
    "\2\3\3\0\14\3\2\0\32\3\1\u0222\13\3\22\0"+
    "\2\3\3\0\10\3\1\u02eb\3\3\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\24\3\1\u02ec\21\3\33\0"+
    "\1\u02ed\144\0\1\u02ee\56\0\1\u02ef\126\0\1\u0251\114\0"+
    "\1\u02f0\77\0\1\u02f1\111\0\1\u01f4\113\0\1\u0165\114\0"+
    "\1\u02f2\130\0\1\u02f3\106\0\1\u02f4\111\0\1\u02f5\74\0"+
    "\1\u02f6\115\0\1\u024b\126\0\1\u0285\111\0\1\u0165\105\0"+
    "\1\u02f4\107\0\1\u02f3\115\0\1\u01f4\102\0\1\u0282\107\0"+
    "\1\u0197\1\0\1\u0198\1\u02f7\1\u019a\1\u019b\1\u019c\1\0"+
    "\1\u019d\1\u019e\1\u019f\1\u01a0\2\0\1\u01a1\1\u01a2\1\u01a3"+
    "\1\u01a4\1\u01a5\1\0\1\u01a6\1\u01a7\1\u01a8\1\0\1\u01a9"+
    "\1\u01aa\2\0\1\u01ab\1\u01ac\1\u01ad\1\u01ae\1\u01af\1\0"+
    "\1\u01b0\1\u01b1\1\u01b2\1\u01b3\1\u01b4\1\u01b5\1\u01b6\1\u01b7"+
    "\1\u01b8\1\0\1\u01b9\1\u01ba\1\u01bb\1\0\1\u01bc\1\u01bd"+
    "\42\0\1\u02f8\104\0\1\u0165\143\0\1\u02f9\124\0\1\u0276"+
    "\114\0\1\u02fa\101\0\1\u02fb\111\0\1\u0218\113\0\1\u0165"+
    "\114\0\1\u02fc\126\0\1\u02fd\106\0\1\u02fe\111\0\1\u02ff"+
    "\76\0\1\u0300\115\0\1\u0270\124\0\1\u02a2\111\0\1\u0165"+
    "\107\0\1\u02fe\107\0\1\u02fd\115\0\1\u0218\102\0\1\u029f"+
    "\55\0\1\u0197\1\0\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c"+
    "\1\0\1\u019d\1\u019e\1\u019f\1\u01a0\2\0\1\u01a1\1\u01a2"+
    "\1\u01a3\1\u01a4\1\u01a5\1\0\1\u01a6\1\u01a7\1\u01a8\1\0"+
    "\1\u01a9\1\u01aa\2\0\1\u01ab\1\u0301\1\u01ad\1\u01ae\1\u01af"+
    "\1\0\1\u01b0\1\u01b1\1\u01b2\1\u01b3\1\u01b4\1\u01b5\1\u01b6"+
    "\1\u01b7\1\u01b8\1\0\1\u01b9\1\u01ba\1\u01bb\1\0\1\u01bc"+
    "\1\u01bd\74\0\1\u0302\104\0\1\u0165\152\0\1\u0303\10\0"+
    "\2\3\3\0\11\3\1\u0304\2\3\2\0\46\3\22\0"+
    "\2\3\3\0\14\3\2\0\25\3\1\u0305\20\3\27\0"+
    "\1\u0306\112\0\1\u0307\117\0\1\u0282\131\0\1\u01f4\72\0"+
    "\1\u0308\120\0\1\u0309\102\0\1\u030a\122\0\1\u030b\105\0"+
    "\1\u030c\126\0\1\u030d\102\0\1\u01da\10\0\1\u0165\76\0"+
    "\1\u02cd\143\0\1\u029f\127\0\1\u0218\74\0\1\u030e\120\0"+
    "\1\u030f\102\0\1\u0310\122\0\1\u0311\105\0\1\u0312\124\0"+
    "\1\u0313\104\0\1\u01fe\6\0\1\u0165\100\0\1\u02e2\147\0"+
    "\1\u0314\10\0\2\3\3\0\3\3\1\u0315\10\3\2\0"+
    "\46\3\22\0\2\3\3\0\14\3\2\0\17\3\1\u0316"+
    "\26\3\34\0\1\u0317\144\0\1\u0318\65\0\1\u01d9\120\0"+
    "\1\u0319\77\0\1\u01f4\105\0\1\u031a\1\0\1\u0198\1\u0199"+
    "\1\u019a\1\u019b\1\u019c\1\0\1\u019d\1\u019e\1\u019f\1\u01a0"+
    "\2\0\1\u01a1\1\u01a2\1\u01a3\1\u01a4\1\u01a5\1\0\1\u01a6"+
    "\1\u01a7\1\u01a8\1\0\1\u01a9\1\u01aa\2\0\1\u01ab\1\u01ac"+
    "\1\u01ad\1\u01ae\1\u01af\1\0\1\u01b0\1\u01b1\1\u01b2\1\u01b3"+
    "\1\u01b4\1\u01b5\1\u01b6\1\u01b7\1\u01b8\1\0\1\u01b9\1\u01ba"+
    "\1\u01bb\1\0\1\u01bc\1\u01bd\43\0\1\u030d\106\0\1\u028e"+
    "\150\0\1\u01fd\116\0\1\u031b\101\0\1\u0218\53\0\1\u031c"+
    "\1\0\1\u0198\1\u0199\1\u019a\1\u019b\1\u019c\1\0\1\u019d"+
    "\1\u019e\1\u019f\1\u01a0\2\0\1\u01a1\1\u01a2\1\u01a3\1\u01a4"+
    "\1\u01a5\1\0\1\u01a6\1\u01a7\1\u01a8\1\0\1\u01a9\1\u01aa"+
    "\2\0\1\u01ab\1\u01ac\1\u01ad\1\u01ae\1\u01af\1\0\1\u01b0"+
    "\1\u01b1\1\u01b2\1\u01b3\1\u01b4\1\u01b5\1\u01b6\1\u01b7\1\u01b8"+
    "\1\0\1\u01b9\1\u01ba\1\u01bb\1\0\1\u01bc\1\u01bd\75\0"+
    "\1\u0313\106\0\1\u02ab\67\0\1\u031d\70\0\2\3\3\0"+
    "\12\3\1\u031e\1\3\2\0\46\3\22\0\2\3\3\0"+
    "\14\3\2\0\26\3\1\u031f\17\3\35\0\1\u0320\144\0"+
    "\1\u0321\56\0\1\u0285\106\0\1\u01d6\5\0\1\u0322\142\0"+
    "\1\u02a2\54\0\1\u01d6\37\0\1\u0323\153\0\1\u0324\4\0"+
    "\2\3\3\0\13\3\1\316\2\0\46\3\22\0\2\3"+
    "\3\0\14\3\2\0\27\3\1\316\16\3\36\0\1\u0325"+
    "\144\0\1\u0326\71\0\1\u030a\142\0\1\u0310\52\0\1\u0327"+
    "\144\0\1\u0328\61\0\1\u0329\144\0\1\u032a\52\0\1\u032b"+
    "\144\0\1\u032c\67\0\1\u032d\144\0\1\u032e\61\0\1\u024a"+
    "\144\0\1\u024a\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[59475];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\12\1\2\11"+
    "\40\1\1\11\5\1\4\11\1\0\1\1\1\0\126\1"+
    "\5\11\1\0\1\11\1\1\2\0\146\1\1\0\35\1"+
    "\1\0\161\1\47\0\30\1\112\0\13\1\43\0\1\1"+
    "\44\0\1\1\5\0\5\1\75\0\3\1\24\0\1\1"+
    "\24\0\1\1\3\0\2\1\27\0\2\1\5\0\1\1"+
    "\5\0\1\1\3\0\2\1\7\0\2\1\4\0\1\11"+
    "\12\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[814];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 30: break;
          case 2: 
            { lexeme=yytext(); return ID;
            }
          case 31: break;
          case 3: 
            { lexeme=yytext(); return INT;
            }
          case 32: break;
          case 4: 
            { /*Ignore*/
            }
          case 33: break;
          case 5: 
            { return DIVIDED;
            }
          case 34: break;
          case 6: 
            { return TIMES;
            }
          case 35: break;
          case 7: 
            { return OPEN_PARENTHESIS;
            }
          case 36: break;
          case 8: 
            { return CLOSE_PARENTHESIS;
            }
          case 37: break;
          case 9: 
            { return PLUS;
            }
          case 38: break;
          case 10: 
            { return MINUS;
            }
          case 39: break;
          case 11: 
            { return ASSIGN;
            }
          case 40: break;
          case 12: 
            { return NOT;
            }
          case 41: break;
          case 13: 
            { return GREATER;
            }
          case 42: break;
          case 14: 
            { return LESS;
            }
          case 43: break;
          case 15: 
            { return DOUBLE_QUOTE;
            }
          case 44: break;
          case 16: 
            { return VAR;
            }
          case 45: break;
          case 17: 
            { return COMMA;
            }
          case 46: break;
          case 18: 
            { return SEMICOLON;
            }
          case 47: break;
          case 19: 
            { return SINGLE_QUOTE;
            }
          case 48: break;
          case 20: 
            { lexeme=yytext(); return RESERVED;
            }
          case 49: break;
          case 21: 
            { return EQUALS;
            }
          case 50: break;
          case 22: 
            { return AND;
            }
          case 51: break;
          case 23: 
            { return OR;
            }
          case 52: break;
          case 24: 
            { return GREATEROREQUAL;
            }
          case 53: break;
          case 25: 
            { return LESSOREQUAL;
            }
          case 54: break;
          case 26: 
            { lexeme=yytext(); return STRING;
            }
          case 55: break;
          case 27: 
            { lexeme=yytext(); return REAL;
            }
          case 56: break;
          case 28: 
            { lexeme=yytext(); return TYPE;
            }
          case 57: break;
          case 29: 
            { lexeme=yytext(); return CONST;
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
