/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analizador_lexico;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Reader;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.*;

/**
 *
 * @author SERGIO-PC
 */
public class MiniPHP extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public MiniPHP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setText("Archivo sin seleccionar");

        jButton1.setText("Cargar Archivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jTextField1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public String PATH = "C:/Users/SERGIO-PC/Desktop/";
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        BufferedReader reader;
        String currentLine;
        BufferedWriter writer;
        BufferedWriter writerErrores;
        FileFilter filter = new FileNameExtensionFilter("PHP Files", "php");
        jFileChooser1.setFileFilter(filter);
        try {
            int returnVal = jFileChooser1.showOpenDialog(jFileChooser1);
            if (returnVal == jFileChooser1.APPROVE_OPTION)
            {
                File file = jFileChooser1.getSelectedFile();
                //This is where a real application would open the file.
                jTextArea1.append("Selected file: " + file.getAbsolutePath());
                ProbarLexerFile(file);
                if (hayError)
                {
                    
                    writerErrores = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(PATH + "errores_encontrados.txt"), "utf-8"));
                    for (int i = 0; i < listaErrores.size(); i++) {
                        writerErrores.write(listaErrores.get(i));
                    }
                    writerErrores.close();
                }
                else
                {
                    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(PATH + file.getName().replaceAll(".php", ".out")), "utf-8"));
                    reader = new BufferedReader(new FileReader(file.getAbsolutePath()));
                    while ((currentLine = reader.readLine()) != null)
                    {
                        if (currentLine.contains("$recordset"))
                        {
                            String aux;
                            String arreglarRecordset = currentLine.replaceAll("\\s", "");
                            arreglarRecordset = currentLine.replaceAll("$recordset[\"", "");
                            arreglarRecordset = arreglarRecordset.replaceAll("\"].*", "");
                            aux = arreglarRecordset;
                            arreglarRecordset = arreglarRecordset.toUpperCase();
                            currentLine = currentLine.replaceAll(aux, arreglarRecordset);
                        }
                        if(currentLine.contains("ELSE"))
                        {
                            currentLine = currentLine.replaceAll("ELSE", "else");
                        }
                        if(currentLine.contains("ELSEIF"))
                        {
                            currentLine = currentLine.replaceAll("ELSEIF", "elseif");
                        }
                        if(currentLine.contains("WHILE"))
                        {
                            currentLine = currentLine.replaceAll("WHILE", "while");
                        }
                        if(currentLine.contains("DO"))
                        {
                            currentLine = currentLine.replaceAll("DO", "do");
                        }
                        if(currentLine.contains("FOR"))
                        {
                            currentLine = currentLine.replaceAll("FOR", "for");
                        }
                        if(currentLine.contains("FOREACH"))
                        {
                            currentLine = currentLine.replaceAll("FOREACH", "foreach");
                        }
                        if(currentLine.contains("BREAK"))
                        {
                            currentLine = currentLine.replaceAll("BREAK", "break");
                        }
                        if(currentLine.contains("SWITCH"))
                        {
                            currentLine = currentLine.replaceAll("SWITCH", "switch");
                        }
                        if(currentLine.contains("INCLUDE"))
                        {
                            currentLine = currentLine.replaceAll("INCLUDE", "include");
                        }
                        if(currentLine.contains("CONTINUE"))
                        {
                            currentLine = currentLine.replaceAll("CONTINUE", "continue");
                        }
                        if(currentLine.contains("RETURN"))
                        {
                            currentLine = currentLine.replaceAll("RETURN", "return");
                        }
                        writer.write(currentLine);
                    }
                    writer.close();
                    reader.close();
                }
            }
            else
            {
                jTextArea1.append("No file has been selected.\n");
            }
            
            
        }
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniPHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniPHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniPHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniPHP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniPHP().setVisible(true);
            }
        });
    }
    
    public boolean hayError = false;
    
    public ArrayList<String> listaErrores = new ArrayList<String>();
    public void ProbarLexerFile(File filetoread) throws IOException{
        Reader reader;
        reader = new BufferedReader(new FileReader(filetoread.getAbsolutePath()));
        Lexer  lexer = new Lexer(reader);
        String resultados = "";
        
        while (true){
            Token token = lexer.yylex();
            if (token == null){
                resultados = resultados + "EOF";
                jTextArea1.setText(resultados);
                return;
            }
            switch(token){
                case ERROR:
                    resultados =  resultados + " ERROR in line: "+lexer.linea+", column: "+lexer.columna+", symbol is not part of PHP Language. \n ";
                    hayError = true;
                    listaErrores.add(resultados);
                break;
                case ID: case INT: case __HALT_COMPILER: case ABSTRACT: case AND: case ARRAY:
                case AS:case BREAK:case CALLABLE:case CASE:case CATCH:case CLASS:case CLONE:
                case CONST:case CONTINUE:case DECLARE:case DEFAULT:case DIE:case DO:
                case ECHO:case ELSE:case ELSEIF:case EMPTY:case ENDDECLARE:case ENDFOR:
                case ENDFOREACH:case ENDIF:case ENDSWITCH:case ENDWHILE:case EVAL:case EXIT:
                case EXTENDS:case FINAL:case FINALLY:case FOR:case FOREACH:case FUNCTION:case GLOBAL:
                case GOTO :case IF:case IMPLEMENTS:case INCLUDE:case INCLUDE_ONCE:case INSTANCEOF:
                case INSTEADOF:case INTERFACE:case ISSET:case LIST:case NAMESPACE:case NEW:case OR:
                case PRIN:case PRIVATE:case PROTECTED:case PUBLIC:case REQUIRE:case REQUIRE_ONCE:case RETURN:
                case STATIC:case SWITCH:case THROW:case TRAIT:case TRY:case UNSET:case USE:
                case WHILE: case XOR: case YIELD: case RESERVED: case STRING: case REAL: case ESTRUCTURA_DE_CONTROL:
                case PREDEFINEDVARIABLE: case RECORDSET: case COMMENT:
                    resultados =  resultados + "Token: "+token+" "+lexer.lexeme+"\n";
                break;
                default:
                    resultados = resultados + "Token:"+token+"\n";
            }
        }
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
